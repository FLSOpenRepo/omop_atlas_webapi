/// 
Class User.conceptsynonym Extends (%Persistent, Base) [ ClassType = persistent, DdlAllowed, Final, Owner = {kchalyh}, ProcedureBlock, SqlRowIdPrivate, SqlTableName = concept_synonym ]
{

/// Property conceptsynonymid As %Library.Integer(MAXVAL = 2147483647, MINVAL = -2147483648) [ Required, SqlColumnNumber = 2, SqlFieldName = concept_synonym_id ];
Property conceptid As %Library.Integer(MAXVAL = 2147483647, MINVAL = -2147483648) [ Required, SqlColumnNumber = 3, SqlFieldName = concept_id ];

Property conceptsynonymname As %Library.String(MAXLEN = 1000) [ Required, SqlColumnNumber = 4, SqlFieldName = concept_synonym_name ];

Property languageconceptid As %Library.Integer(MAXVAL = 2147483647, MINVAL = -2147483648) [ Required, SqlColumnNumber = 5, SqlFieldName = language_concept_id ];

Parameter USEEXTENTSET = 1;

/// Bitmap Extent Index auto-generated by DDL CREATE TABLE statement.  Do not edit the SqlName of this index.
Index DDLBEIndex [ Extent, SqlName = "%%DDLBEIndex", Type = bitmap ];

ClassMethod InsertLine(fileLine As %String, delimiter As %Char = ",") As %Status [ Language = objectscript ]
{
	set lineLen = $l(fileLine, delimiter)
	set p1 = $p(fileLine, delimiter, 1)
	set p2 = $p(fileLine, delimiter, 2, lineLen-1)
	set p3 = $p(fileLine, delimiter, lineLen)

	set obj = ..%New()
	
	set obj.conceptid = p1
	set obj.conceptsynonymname = p2
	set obj.languageconceptid = p3
	
	quit obj.%Save()
}

Storage Default
{
<Data name="conceptsynonymDefaultData">
<Value name="1">
<Value>conceptid</Value>
</Value>
<Value name="2">
<Value>conceptsynonymname</Value>
</Value>
<Value name="3">
<Value>languageconceptid</Value>
</Value>
</Data>
<DataLocation>^poCN.Dtp0.1</DataLocation>
<DefaultData>conceptsynonymDefaultData</DefaultData>
<ExtentLocation>^poCN.Dtp0</ExtentLocation>
<IdLocation>^poCN.Dtp0.1</IdLocation>
<Index name="DDLBEIndex">
<Location>^poCN.Dtp0.2</Location>
</Index>
<Index name="IDKEY">
<Location>^poCN.Dtp0.1</Location>
</Index>
<IndexLocation>^poCN.Dtp0.I</IndexLocation>
<StreamLocation>^poCN.Dtp0.S</StreamLocation>
<Type>%Storage.Persistent</Type>
}

}

